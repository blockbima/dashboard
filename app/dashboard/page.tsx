"use client";import{useEffect,useState}from'react';import{CSVLink}from'react-csv';import clsx from'clsx';export default function Dashboard(){const[allContracts,setAllContracts]=useState<any[]>([]);const[searchTerm,setSearchTerm]=useState('');const[regionFilter,setRegionFilter]=useState('');const[sortKey,setSortKey]=useState<keyof any>('created_at');const[sortOrder,setSortOrder]=useState<'asc'|'desc'>('asc');const[pageNum,setPageNum]=useState(1);const pageSize=10;useEffect(()=>{fetch('/api/contracts').then(res=>res.json()).then(data=>setAllContracts(data.contracts||[])).catch(()=>setAllContracts([]));},[]);const filtered=allContracts.filter(c=>{const byRegion=!regionFilter||c.region.name===regionFilter;const bySearch=!searchTerm||c.id.includes(searchTerm)||c.beneficiaries.some((b:string)=>b.includes(searchTerm));return byRegion&&bySearch;});const sorted=[...filtered].sort((a,b)=>{const aVal=a[sortKey],bVal=b[sortKey];if(aVal<bVal)return sortOrder==='asc'?-1:1;if(aVal>bVal)return sortOrder==='asc'?1:-1;return 0;});const totalPages=Math.ceil(sorted.length/pageSize);const paginated=sorted.slice((pageNum-1)*pageSize,pageNum*pageSize);const handleSort=(key:string)=>{if(sortKey===key)setSortOrder(o=>o==='asc'?'desc':'asc');else{setSortKey(key);setSortOrder('asc');}};const regions=Array.from(new Set(allContracts.map(c=>c.region.name)));return(<div className="space-y-6"><div className="flex gap-4"><input placeholder="Search by ID or beneficiary" value={searchTerm} onChange={e=>{setSearchTerm(e.target.value);setPageNum(1);}} className="border px-2 py-1 rounded"/><select value={regionFilter} onChange={e=>{setRegionFilter(e.target.value);setPageNum(1);}} className="border px-2 py-1 rounded"><option value="">All Regions</option>{regions.map(r=><option key={r}>{r}</option>)}</select><CSVLink data={sorted} filename="contracts.csv" className="ml-auto bg-blue-600 text-white px-3 py-1 rounded">Export CSV</CSVLink></div><div className="overflow-auto"><table className="min-w-full border"><thead><tr className="bg-gray-200">{['region','beneficiaries','total_premium','is_fulfilled','created_at'].map(k=>(<th key={k} className="p-2 cursor-pointer" onClick={()=>handleSort(k)}>{k.replace('_',' ')}{sortKey===k?(sortOrder==='asc'?' ▲':' ▼'):''}</th>))}</tr></thead><tbody>{paginated.map(c=>(<tr key={c.id} className={clsx('border-t',!c.is_fulfilled&&'bg-yellow-100')}><td className="p-2">{c.region.name}</td><td className="p-2">{c.beneficiaries.length}</td><td className="p-2">{c.total_premium}</td><td className="p-2">{c.is_fulfilled?'Settled':'Active'}</td><td className="p-2">{new Date(c.created_at).toLocaleDateString()}</td></tr>))}</tbody></table></div><div className="flex justify-center gap-4"><button disabled={pageNum===1} onClick={()=>setPageNum(p=>p-1)} className="px-3 py-1 bg-gray-200 rounded">Prev</button><span>Page {pageNum} of {totalPages}</span><button disabled={pageNum===totalPages} onClick={()=>setPageNum(p=>p+1)} className="px-3 py-1 bg-gray-200 rounded">Next</button></div></div>);}